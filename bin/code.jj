PARSER_BEGIN(JavaScriptCompiler)

package compiler;

public class JavaScriptCompiler {

    public static void main(String[] args) {
        try {
            String program = FileUtil.read("codeTest.js");
            new JavaScriptCompiler(new java.io.StringReader(program)).run();
            System.out.println("\n\nSyntax is correct. Compiled successfully!");
        } catch (Throwable e) {
            System.out.println("\n\nSyntax error: " + e.getMessage());
        }
    }
}

PARSER_END(JavaScriptCompiler)

// Ignore whitespaces and comments
SKIP:
{ " " | "\r" | "\t" | "\n"
| <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])*>
| <MULTI_LINE_COMMENT: "/*" (~["*/"])* "*/">
}

// Keywords and reserved words
TOKEN:
{
    <IF: "if"> | <ELSE: "else"> | <WHILE: "while"> | <VAR: "var">
    | <FUNCTION: "function"> | <RETURN: "return"> | <BREAK: "break">
    | <CONTINUE: "continue"> | <TRUE: "true"> | <FALSE: "false">
    | <CONSOLE_LOG: "console.log"> | <INPUT: "prompt">
}

// Delimiters
TOKEN:
{
    <LPAREN: "("> | <RPAREN: ")"> | <LBRACE: "{"> | <RBRACE: "}">
    | <SEMICOLON: ";"> | <COMMA: ","> | <DOT: ".">
}

// Operators
TOKEN:
{
    <ASSIGN: "="> | <EQ: "=="> | <LT: "<"> | <GT: ">"> | <LTE: "<="> | <GTE: ">=">
    | <NOT: "!"> | <INC: "++"> | <DEC: "--"> | <PLUS: "+"> | <MINUS: "-">
    | <MULT: "*"> | <DIV: "/"> | <MOD: "%"> | <AND: "&&"> | <OR: "||">
}

// Identifiers and literals
TOKEN:
{
    <IDENTIFIER: (["a"-"z", "A"-"Z", "_"]) (["a"-"z", "A"-"Z", "0"-"9", "_"])*>
    | <INTEGER_LITERAL: ["0"-"9"]+>
    | <FLOAT_LITERAL: (["0"-"9"]+ "." ["0"-"9"]+ ([eE] ["+-"]? ["0"-"9"]+)?)>
    | <STRING_LITERAL: "\"" (~["\""])* "\"">
}

/****************************************
* ******** GRAMMAR FOR JAVASCRIPT *******
*****************************************/

void run():{}{ program() }

void program():{}{ statement() (statement())* }

void statement():{}{ variableDeclaration() | assignmentStatement() | ifStatement() | whileStatement() | breakStatement() | continueStatement() | returnStatement() | printStatement() }

void variableDeclaration():{}{ <VAR> <IDENTIFIER> ("=" expression())? <SEMICOLON> }

void assignmentStatement():{}{ <IDENTIFIER> <ASSIGN> expression() <SEMICOLON> }

void ifStatement():{}{ <IF> <LPAREN> expression() <RPAREN> statement() (<ELSE> statement())? }

void whileStatement():{}{ <WHILE> <LPAREN> expression() <RPAREN> statement() }

void breakStatement():{}{ <BREAK> <SEMICOLON> }

void continueStatement():{}{ <CONTINUE> <SEMICOLON> }

void returnStatement():{}{ <RETURN> expression()? <SEMICOLON> }

void printStatement():{}{ <CONSOLE_LOG> <LPAREN> expression() <RPAREN> <SEMICOLON> }

void expression():{}{ logicalOrExpression() }

void logicalOrExpression():{}{ logicalAndExpression() (<OR> logicalAndExpression())* }

void logicalAndExpression():{}{ equalityExpression() (<AND> equalityExpression())* }

void equalityExpression():{}{ relationalExpression() ((<EQ> | <NOT> <EQ>) relationalExpression())* }

void relationalExpression():{}{ additiveExpression() ((<LT> | <LTE> | <GT> | <GTE>) additiveExpression())* }

void additiveExpression():{}{ multiplicativeExpression() ((<PLUS> | <MINUS>) multiplicativeExpression())* }

void multiplicativeExpression():{}{ unaryExpression() ((<MULT> | <DIV> | <MOD>) unaryExpression())* }

void unaryExpression():{}{ (<INC> | <DEC> | <PLUS> | <MINUS>)? primaryExpression() }

void primaryExpression():{}{ <IDENTIFIER> | <INTEGER_LITERAL> | <FLOAT_LITERAL> | <STRING_LITERAL> | <TRUE> | <FALSE> | <LPAREN> expression() <RPAREN> }

void variableExpression():{}{ <IDENTIFIER> (<LPAREN> argumentList()? <RPAREN> | <INC> | <DEC>)? }

void argumentList():{}{ expression() (<COMMA> expression())* }