/**
 * SimpleCalc.jj
 */

options {
  STATIC = false;
}

PARSER_BEGIN(SimpleCalc)

import java.io.*;

public class SimpleCalc {
  public static void main(String[] args) throws ParseException {
    System.out.println("SimpleCalc Parser - Enter statements or type 'exit' to end.");
    SimpleCalc parser = new SimpleCalc(System.in);
    parser.Start();
    System.out.println("Parser finished. Goodbye!");
  }
}

PARSER_END(SimpleCalc)

SKIP : {
  " " | "\t" | "\n" | "\r"
}

TOKEN : {
  <STRING: "\"" ( ~["\"", "\n", "\r"] | "\\\"" )* "\"" >
  | <FLOAT: (["0"-"9"])+ "." (["0"-"9"])* >
  | <INTEGER: (["0"-"9"])+ >
  | <IDENTIFIER: (["a"-"z", "A"-"Z", "$", "_"])(["a"-"z", "A"-"Z", "0"-"9", "$", "_"])* >
}

void Start() :
{}
{
  Statement() <EOF>
}

void Statement() :
{}
{
  Assignment() | Expression()
}

void Assignment() :
{}
{
  <IDENTIFIER> "=" Expression()
  { System.out.println("Assignment statement processed."); }
}

void Expression() :
{}
{
  Term() ( "+" Term() | "-" Term() )*
}

void Term() :
{}
{
  Factor() ( "*" Factor() | "/" Factor() )*
}

void Factor() :
{}
{
  <INTEGER> | <FLOAT> | <STRING> | <IDENTIFIER> | "(" Expression() ")"
}

